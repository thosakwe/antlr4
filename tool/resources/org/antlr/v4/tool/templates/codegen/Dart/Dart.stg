/*
 * [The "BSD license"]
 *  Copyright (c) 2012 Terence Parr
 *  Copyright (c) 2012 Sam Harwell
 *  Copyright (c) 2014 Tiago Mazzutti
 *  Copyright (c) 2017 Tobe Osakwe
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions
 *  are met:
 *
 *  1. Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *  2. Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *  3. The name of the author may not be used to endorse or promote products
 *     derived from this software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 *  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 *  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 *  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 *  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

dartTypeInitMap ::= [
	"int":"0",
	"double":"0.0",
	"bool":"false",
	default:"null" // anything other than a primitive type is an object
]

// args must be <object-model-object>, <fields-resulting-in-STs>

ParserFile(file, parser, namedActions) ::= <<
<fileHeader(file.grammarFileName, file.ANTLRVersion)>
<if(file.genPackage)>
part of <file.genPackage>;
<endif>
<namedActions.header>
<parser>
>>

ListenerFile(file, header) ::= <<
<fileHeader(file.grammarFileName, file.ANTLRVersion)>
<if(file.genPackage)>
library <file.genPackage>;
<endif>
<header>

/// This abstract class defines a complete listener for a parse tree produced by
/// [<file.parserName>].
abstract class <file.grammarName>Listener extends ParseTreeListener {
<file.listenerNames:{lname |

  /// Enter a parse tree produced by [<file.parserName>.<lname>].
  /// [context] is the parse tree.
   void enter<lname; format="cap">(<lname; format="cap">Context context);

  /// Exit a parse tree produced by [<file.parserName>.<lname>].
  /// [context] is the parse tree.
  void exit<lname; format="cap">(<lname; format="cap">Context context);}; separator="\n">
}
>>

BaseListenerFile(file, header) ::= <<
<fileHeader(file.grammarFileName, file.ANTLRVersion)>
<if(file.genPackage)>
part of <file.genPackage>;
<endif>
<header>

/// This class provides an empty implementation of [<file.grammarName>Listener],
/// which can be extended to create a listener which only needs to handle
/// a subset of the available methods.
class <file.grammarName>BaseListener implements <file.grammarName>Listener {
<file.listenerNames:{lname |

  /// The default implementation does nothing.
  void enter<lname; format="cap">(<lname; format="cap">Context context) {\}

  /// The default implementation does nothing.
  void exit<lname; format="cap">(<lname; format="cap">Context context) {\}}; separator="\n">

  /// The default implementation does nothing.
  void enterEveryRule(ParserRuleContext context) {}

  /// The default implementation does nothing.
  void exitEveryRule(ParserRuleContext context) {}

  /// The default implementation does nothing.
  void visitTerminal(TerminalNode node) {}

  /// The default implementation does nothing.
  void visitErrorNode(ErrorNode node) {}
}
>>

VisitorFile(file, header) ::= <<
<fileHeader(file.grammarFileName, file.ANTLRVersion)>
<if(file.genPackage)>
part of <file.genPackage>;
<endif>
<header>

/// This abstract class defines a complete generic visitor for a parse tree
/// produced by [<file.parserName>].
///
/// [T] is the eturn type of the visit operation. Use `void` for
/// operations with no return type.
abstract class <file.grammarName>Visitor\<T> extends ParseTreeVisitor\<T> {
  <file.visitorNames:{lname |
/// Visit a parse tree produced by [<file.parserName>.<lname>].
/// [context] is the parse tree.
/// Return the visitor result.
T visit<lname; format="cap">(<lname; format="cap">Context context);}; separator="\n\n">
}
>>

BaseVisitorFile(file, header) ::= <<
<fileHeader(file.grammarFileName, file.ANTLRVersion)>
<if(file.genPackage)>
part of <file.genPackage>;
<endif>
<header>

/// This class provides an empty implementation of [<file.grammarName>Visitor],
/// which can be extended to create a visitor which only needs to handle
/// a subset of the available methods.
///
/// [T] is the return type of the visit operation. Use `void` for
/// operations with no return type.
class <file.grammarName>BaseVisitor\<T> extends ParseTreeVisitor\<T> implements <file.grammarName>Visitor\<T> {
  <file.visitorNames:{lname |
/// The default implementation returns the result of calling
/// [visitChildren] on [context].
T visit<lname; format="cap">(<lname; format="cap">Context context) => visitChildren(context);}; separator="\n\n">
}
>>

fileHeader(grammarFileName, ANTLRVersion) ::= <<
// Generated from <grammarFileName; format="dart-escape"> by antlr4dart
import 'dart:typed_data';
import 'package:antlr/antlr.dart';
import 'package:utf/utf.dart' as utf;
>>

Parser(parser, funcs, atn,  sempredFuncs, superClass) ::= <<
<Parser_(ctor="parser_ctor", ...)>
>>

Parser_(parser, funcs, atn, sempredFuncs, ctor, superClass) ::= <<
<\n>class <parser.name> extends <superClass; null="Parser"> {

  static const int EOF = Token.EOF;

  static const int <parser.rules:{r | RULE_<r.name; format="upper"> = <r.index>}; separator=", ", wrap, anchor>;
  <if(parser.tokens)>
  <\n>  static const int <parser.tokens:{k | <k> = <parser.tokens.(k)>}; separator=", ", wrap, anchor>;
  <endif>
  <atn>
  final PredictionContextCache sharedContextCache = new PredictionContextCache();

  final List\<String> tokenNames = [
    <parser.tokenNames:{t | <t>}; null="\"\<INVALID>\"", separator=", ", wrap, anchor>
  ];

  final List\<String> ruleNames = [
    <parser.ruleNames:{r | "<r>"}; separator=", ", wrap, anchor>
  ];
  <namedActions.members>
  <parser:(ctor)()>

  String get serializedAtn => _serializedAtn;

  String get grammarFileName => "<parser.grammarFileName; format="dart-escape">";
  <funcs>
  <if(sempredFuncs)>
  <\n>  bool semanticPredicate(RuleContext localContext, int ruleIndex, int predIndex) {
    switch (ruleIndex) {
      <parser.sempredFuncs.values:{f| case <f.ruleIndex>: return _<f.name>SemanticPredicate(localContext, predIndex);}; separator="\n">
    }
    return true;
  }
  <sempredFuncs.values; separator="\n\n">
  <endif>
}

<funcs:{func | <if(func.ruleCtx)><func.ruleCtx><endif>}; separator="\n\n">

<funcs:{func | <if(func.altLabelCtxs)><func.altLabelCtxs:{l | <func.altLabelCtxs.(l)>}; separator="\n\n"><endif>}>
>>

dumpActions(recog, argFuncs, actionFuncs, sempredFuncs) ::= <<
<if(actionFuncs)>
<\n>void action(RuleContext localContext, int ruleIndex, int actionIndex) {
  switch (ruleIndex) {
    <recog.actionFuncs.values:{f|case <f.ruleIndex>: _<f.name>_action(localContext, actionIndex); break;}; separator="\n">
  }
}
<actionFuncs.values; separator="\n">
<endif>
<if(sempredFuncs)>
<\n>bool semanticPredicate(RuleContext localContext, int ruleIndex, int predIndex) {
  switch (ruleIndex) {
    <recog.sempredFuncs.values:{f| case <f.ruleIndex>: return _<f.name>SemanticPredicate(localContext, predIndex);}; separator="\n">
  }
  return true;
}
<sempredFuncs.values; separator="\n">
<endif>
>>

parser_ctor(p) ::= <<
<p.name>(TokenStream input) : super(input) {
  var _decisionToDfa = new List\<Dfa>(atn.numberOfDecisions);
  for (int i = 0; i \< atn.numberOfDecisions; i++) {
    _decisionToDfa[i] = new Dfa(atn.getDecisionState(i), i);
  }
  interpreter = new ParserAtnSimulator(this, atn, _decisionToDfa, sharedContextCache);
}
>>

/// This generates a private method since the actionIndex is generated, making an
/// overriding implementation impossible to maintain.
RuleActionFunction(r, actions) ::= <<
<\n>void _<r.name>_action(<r.ctxType> localContext, int actionIndex) {
  switch (actionIndex) {
    <actions:{index|case <index>: <actions.(index)> break;}; separator="\n">
  }
}
>>

/// This generates a private method since the predIndex is generated, making an
/// overriding implementation impossible to maintain.
RuleSempredFunction(r, actions) ::= <<
<\n>bool _<r.name>SemanticPredicate(<r.ctxType> localContext, int predIndex) {
  switch (predIndex) {
    <actions:{index|case <index>: return <actions.(index)>;}; separator="\n">
  }
  return true;
}
>>

RuleFunction(currentRule,args,code,locals,ruleCtx,altLabelCtxs,namedActions,finallyAction,postamble,exceptions) ::= <<

<if(currentRule.modifiers)><currentRule.modifiers:{f | <f> }><else><endif><currentRule.ctxType> <currentRule.name>(<args; separator=", ">) {
  var localContext = new <currentRule.ctxType><if(currentRule.args)>.args<endif>(context, state<currentRule.args:{a | , <a.name>}>);
  enterRule(localContext, <currentRule.startState>, RULE_<currentRule.name; format="upper">);
  <namedActions.init>
  <locals; separator="\n">
  try {
<if(currentRule.hasLookaheadBlock)>
    var _alt;
<endif>
    <code>
    <postamble; separator="\n">
    <namedActions.after>
  } <if(exceptions)> <exceptions; separator="\n"><else>on RecognitionException catch (re) {
    localContext.exception = re;
    errorHandler.reportError(this, re);
    errorHandler.recover(this, re);
  }<endif> finally {
    <finallyAction>
    exitRule();
  }
  return localContext;
}
>>

LeftRecursiveRuleFunction(currentRule,args,code,locals,ruleCtx,altLabelCtxs, namedActions,finallyAction,postamble) ::=
<<

<currentRule.ctxType> <currentRule.name>([int _p = 0]<args:{a | , <a>}>) {
  var _parentctx = context;
  int _parentState = state;
  var localContext = new <currentRule.ctxType>(context, _parentState<args:{a | , <a.name>}>);
  var _prevctx = localContext;
  int _startState = <currentRule.startState>;
  enterRecursionRule(localContext, <currentRule.startState>, RULE_<currentRule.name; format="upper">, _p);
  <namedActions.init>
  <locals; separator="\n">
  try {
<if(currentRule.hasLookaheadBlock)>
    int _alt;
<endif>
    <code>
    <postamble; separator="\n">
    <namedActions.after>
  } on RecognitionException catch (re) {
    localContext.exception = re;
    errorHandler.reportError(this, re);
	errorHandler.recover(this, re);
  } finally {
    <finallyAction>
    unrollRecursionContexts(_parentctx);
  }
  return localContext;
}
>>

CodeBlockForOuterMostAlt(currentOuterMostAltCodeBlock, locals, preamble, ops) ::= <<
<if(currentOuterMostAltCodeBlock.altLabel)>localContext = new <currentOuterMostAltCodeBlock.altLabel; format="cap">Context(localContext);<endif>
enterOuterAlt(localContext, <currentOuterMostAltCodeBlock.alt.altNum>);
<CodeBlockForAlt(currentAltCodeBlock=currentOuterMostAltCodeBlock, ...)>
>>

CodeBlockForAlt(currentAltCodeBlock, locals, preamble, ops) ::= <<
<locals; separator="\n">
<preamble; separator="\n">
<ops; separator="\n">
>>

LL1AltBlock(choice, preamble, alts, error) ::= <<
state = <choice.stateNumber>;
<if(choice.label)><\n><labelref(choice.label)> = inputSource.lookToken(1);<\n><\n><endif>
<preamble; separator="\n\n">
switch (inputSource.lookAhead(1)) {
<choice.altLook,alts:{look,alt|
  <cases(ttypes=look)>
    <alt>
    break;};separator="\n">
  default: <error>
}
>>

LL1OptionalBlock(choice, alts, error) ::= <<
state = <choice.stateNumber>;
switch (inputSource.lookAhead(1)) {
<choice.altLook,alts:{look,alt|
  <cases(ttypes=look)>
    <alt>
    break;}; separator="\n">
  default:<error>
}
>>

LL1OptionalBlockSingleAlt(choice, expr, alts, preamble, error, followExpr) ::= <<
state = <choice.stateNumber>;
<preamble; separator="\n\n">
if (<expr>) {
  <alts; separator="\n">
}
>>

LL1StarBlock(choice, alts) ::= <<
state = <choice.stateNumber>;
errorHandler.sync(this);
<choice.loopLabel>:while (true) {
  switch (inputSource.lookAhead(1)) {
  <choice.altLook,alts:{look,alt|
	<cases(look)>
      <alt>
      break;}; separator="\n">
    <cases(choice.exitLook)>
      break <choice.loopLabel>;
  }
  state = <choice.loopBackStateNumber>;
  errorHandler.sync(this);
}
>>

LL1StarBlockSingleAlt(choice, loopExpr, alts, preamble, iteration) ::= <<
state = <choice.stateNumber>;
errorHandler.sync(this);
<preamble; separator="\n">
while (<loopExpr>) {
  <alts; separator="\n">
  state = <choice.loopBackStateNumber>;
  errorHandler.sync(this);
  <iteration>
}
>>

LL1PlusBlock(choice, alts, iteration, loopExpr, error) ::= <<
state = <choice.blockStartStateNumber>; <! alt block decision !>
errorHandler.sync(this);
do {
  switch (inputSource.lookAhead(1)) {
  <choice.altLook,alts:{look,alt|
      <cases(look)>
      <alt>break;}; separator="\n">
    default:<error>
  }
  state = <choice.stateNumber>;
  errorHandler.sync(this);
  <iteration>
} while (<loopExpr>);
>>

LL1PlusBlockSingleAlt(choice, loopExpr, alts, preamble, iteration) ::= <<
state = <choice.blockStartStateNumber>; <! alt block decision !>
errorHandler.sync(this);
<preamble; separator="\n">
do {
  <alts; separator="\n">
  state = <choice.stateNumber>; <! loopback/exit decision !>
  errorHandler.sync(this);
  <iteration>
} while (<loopExpr>);
>>

// LL(*) stuff

AltBlock(choice, preamble, alts, error) ::= <<
state = <choice.stateNumber>;
<!errorHandler.sync(this);!>
<if(choice.label)><labelref(choice.label)> = inputSource.lookToken(1);<endif>
<preamble; separator="\n">
switch (interpreter.adaptivePredict(inputSource, <choice.decision>, context)) {
<alts:{alt |
  case <i>:
    <alt>
    break;}; separator="\n">
}
>>

OptionalBlock(choice, alts, error) ::= <<
state = <choice.stateNumber>;
<!errorHandler.sync(this);!>
switch (interpreter.adaptivePredict(inputSource, <choice.decision>, context)) {
<alts:{alt |
  case <i><if(!choice.ast.greedy)>+1<endif>:
    <alt>
    break;}; separator="\n">
}
>>

StarBlock(choice, alts, sync, iteration) ::= <<
state = <choice.stateNumber>;
errorHandler.sync(this);
_alt = interpreter.adaptivePredict(inputSource, <choice.decision>, context);
while (_alt != <choice.exitAlt> && _alt != Atn.INVALID_ALT_NUMBER) {
  if (_alt == 1<if(!choice.ast.greedy)> + 1<endif>) {
    <iteration>
    <alts> <! should only be one !>
  }
  state = <choice.loopBackStateNumber>;
  errorHandler.sync(this);
  _alt = interpreter.adaptivePredict(inputSource, <choice.decision>, context);
}
>>

PlusBlock(choice, alts, error) ::= <<
state = <choice.blockStartStateNumber>; <! alt block decision !>
errorHandler.sync(this);
_alt = 1<if(!choice.ast.greedy)>+1<endif>;
do {
  switch (_alt) {
  <alts:{alt|case <i><if(!choice.ast.greedy)> + 1<endif>:
	  <alt>
	  break;}; separator="\n">
	default:
	  <error>
  }
  state = <choice.loopBackStateNumber>; <! loopback/exit decision !>
  errorHandler.sync(this);
  _alt = interpreter.adaptivePredict(inputSource, <choice.decision>, context);
} while (_alt != <choice.exitAlt> && _alt != Atn.INVALID_ALT_NUMBER);
>>

Sync(s) ::= "sync(<s.expecting.name>);"

ThrowNoViableAlt(t) ::= "throw new NoViableAltException(this);"

TestSetInline(s) ::= <<
<s.bitsets:{bits | <if(rest(rest(bits.ttypes)))><bitsetBitfieldComparison(s, bits)><else><bitsetInlineComparison(s, bits)><endif>}; separator=" || ">
>>

testShiftInRange(shiftAmount) ::= <<
((<shiftAmount>) & ~0x3f) == 0
>>

// produces smaller bytecode only when bits.ttypes contains more than two items
bitsetBitfieldComparison(s, bits) ::= <%
(<testShiftInRange({<offsetShift(s.varName, bits.shift)>})> && ((BIG_ONE \<\< <offsetShift(s.varName, bits.shift)>) & (<bits.ttypes:{ttype | (BIG_ONE \<\< <offsetShift(ttype, bits.shift)>)}; separator=" | ", wrap={<\n><\t>}>)) != BIG_ZERO)
%>

isZero ::= [
"0":true,
default:false
]

offsetShift(shiftAmount, offset) ::= <%
<if(!isZero.(offset))>(<shiftAmount> - <offset>)<else><shiftAmount><endif>
%>

// produces more efficient bytecode when bits.ttypes contains at most two items
bitsetInlineComparison(s, bits) ::= <%
<bits.ttypes:{ttype | <s.varName> == <ttype>}; separator=" || ">
%>

cases(ttypes) ::= <<
<ttypes:{t | case <t>:}; separator="\n">
>>

InvokeRule(r, argExprsChunks) ::= <<
state = <r.stateNumber>;
<if(r.labels)><r.labels:{l | <labelref(l)> = }><endif><r.name>(<if(r.ast.options.p)><r.ast.options.p><if(argExprsChunks)>,<endif><endif><argExprsChunks>);
>>

MatchToken(m) ::= <<
state = <m.stateNumber>;
<if(m.labels)><m.labels:{l | <labelref(l)> = }><endif>match(<m.name>);
>>

MatchSet(m, expr, capture) ::= "<CommonSetStuff(m, expr, capture, false)>"

MatchNotSet(m, expr, capture) ::= "<CommonSetStuff(m, expr, capture, true)>"

CommonSetStuff(m, expr, capture, invert) ::= <<
state = <m.stateNumber>;
<if(m.labels)><m.labels:{l | <labelref(l)> = }>inputSource.lookToken(1);<endif>
<capture>
if (<if(invert)><m.varName> \<= 0 || <else>!<endif>(<expr>)) {
  <if(m.labels)><m.labels:{l | <labelref(l)> = }><endif>  errorHandler.recoverInline(this);
}
consume();
>>

Wildcard(w) ::= <<
state = <w.stateNumber>;
<if(w.labels)><w.labels:{l | <labelref(l)> = }><endif>matchWildcard();
>>

// ACTION STUFF

Action(a, foo, chunks) ::= "<chunks>"

ArgAction(a, chunks) ::= "<chunks>"

SemPred(p, chunks, failChunks) ::= <<
state = <p.stateNumber>;
if (!(<chunks>))
  throw new FailedPredicateException(this, <p.predicate><if(failChunks)>, <failChunks><elseif(p.msg)>, <p.msg><endif>);
>>

ExceptionClause(e, catchArg, catchAction) ::= <<
catch (<catchArg>) {
    <catchAction>
  }
>>

// lexer actions are not associated with model objects

LexerSkipCommand()    ::= "skip();"
LexerMoreCommand()    ::= "more();"
LexerPopModeCommand() ::= "popMode();"

LexerTypeCommand(arg)      ::= "type = <arg>;"
LexerChannelCommand(arg)   ::= "channel = Lexer.<arg>;"
LexerModeCommand(arg)      ::= "mode = <arg>;"
LexerPushModeCommand(arg)  ::= "pushMode(<arg>);"

DefaultParserSuperClass(s) ::= "Parser"
DefaultLexerSuperClass(s)  ::= "Lexer"

ActionText(t) ::= "<t.text>"
ActionTemplate(t) ::= "<t.st>"
ArgRef(a) ::= "localContext.<a.name>"
LocalRef(a) ::= "localContext.<a.name>"
RetValueRef(a) ::= "localContext.<a.name>"
QRetValueRef(a) ::= "<ctx(a)>.<a.dict>.<a.name>"
/** How to translate $tokenLabel */
TokenRef(t) ::= "<ctx(t)>.<t.name>"
LabelRef(t) ::= "<ctx(t)>.<t.name>"
ListLabelRef(t) ::= "<ctx(t)>.<ListLabelName(t.name)>"
SetAttr(s,rhsChunks) ::= "<ctx(s)>.<s.name> = <rhsChunks>;"

TokenLabelType() ::= "<file.TokenLabelType; null={Token}>"
InputSymbolType() ::= "<file.InputSymbolType; null={Token}>"

TokenPropertyRef_text(t) ::= "<ctx(t)>.<t.label> != null ? <ctx(t)>.<t.label>.text : null"
TokenPropertyRef_type(t) ::= "<ctx(t)>.<t.label> != null ? <ctx(t)>.<t.label>.type : 0"
TokenPropertyRef_line(t) ::= "<ctx(t)>.<t.label> != null ? <ctx(t)>.<t.label>.line : 0"
TokenPropertyRef_pos(t) ::= "<ctx(t)>.<t.label> != null ? <ctx(t)>.<t.label>.charPositionInLine : 0"
TokenPropertyRef_channel(t) ::= "<ctx(t)>.<t.label> != null ? <ctx(t)>.<t.label>.channel : 0"
TokenPropertyRef_index(t) ::= "<ctx(t)>.<t.label> != null ? <ctx(t)>.<t.label>.tokenIndex : 0"
TokenPropertyRef_int(t) ::= "<ctx(t)>.<t.label> != null ? int.parse(<ctx(t)>.<t.label>.text) : 0"

RulePropertyRef_start(r) ::= "<ctx(r)>.<r.label> != null ? <ctx(r)>.<r.label>.start : null"
RulePropertyRef_stop(r)	 ::= "<ctx(r)>.<r.label> != null ? <ctx(r)>.<r.label>.stop : null"
RulePropertyRef_text(r)	 ::= "<ctx(r)>.<r.label> != null ? inputSource.getText(<ctx(r)>.<r.label>.start,<ctx(r)>.<r.label>.stop) : null"
RulePropertyRef_ctx(r)	 ::= "<ctx(r)>.<r.label>"

ThisRulePropertyRef_start(r) ::= "localContext.start"
ThisRulePropertyRef_stop(r)	 ::= "localContext.stop"
ThisRulePropertyRef_text(r)	 ::= "inputSource.getText(localContext.start, inputSource.lookToken(-1))"
ThisRulePropertyRef_ctx(r)	 ::= "localContext"

NonLocalAttrRef(s) ::= "(getInvokingContext(<s.ruleIndex>) as <s.ruleName; format=\"cap\">Context).<s.name>"
SetNonLocalAttr(s, rhsChunks) ::= "(getInvokingContext(<s.ruleIndex>) as <s.ruleName; format=\"cap\">Context).<s.name> = <rhsChunks>;"

AddToLabelList(a) ::= "<ctx(a.label)>.<a.listName>.add(<labelref(a.label)>);"

TokenDecl(t) ::= "<TokenLabelType()> <t.name>"
TokenTypeDecl(t) ::= "int <t.name>;"
TokenListDecl(t) ::= "List\<Token> <t.name> = new List\<Token>()"
RuleContextDecl(r) ::= "<r.ctxName> <r.name>"
RuleContextListDecl(rdecl) ::= "List\<<rdecl.ctxName>> <rdecl.name> = new List\<<rdecl.ctxName>>()"
ContextTokenListGetterDecl(t)  ::= "List\<TerminalNode> get<t.name>s() => getTokens(<parser.name>.<t.name>);"

ContextTokenGetterDecl(t) ::= <<
TerminalNode get<t.name;format="cap">() => getToken(<parser.name>.<t.name>, 0);
>>

ContextTokenListIndexedGetterDecl(t)  ::= <<
TerminalNode get<t.name;format="cap">(int i) => getToken(<parser.name>.<t.name>, i);
>>

ContextRuleGetterDecl(r) ::= <<
<r.ctxName> get<r.name; format="cap">() => getRuleContext((c) => c is <r.ctxName>, 0);
>>

ContextRuleListGetterDecl(r) ::= <<
List\<<r.ctxName>\> get<r.name; format="cap">s() => getRuleContexts((c) => c is <r.ctxName>);
>>

ContextRuleListIndexedGetterDecl(r) ::= <<
<r.ctxName> get<r.name;format="cap">(int i) => getRuleContext((c) => c is <r.ctxName>, i);
>>

LexerRuleContext() ::= "RuleContext"

/// The rule context name is the rule followed by a suffix; e.g.,
/// r becomes rContext.
RuleContextNameSuffix() ::= "Context"

ImplicitTokenLabel(tokenName)     ::= "<tokenName>"
ImplicitRuleLabel(ruleName)	  ::= "<ruleName>"
ImplicitSetLabel(id)		  ::= "tset<id>"
ListLabelName(label)		  ::= "<label>"

CaptureNextToken(d) ::= "<d.varName> = inputSource.lookToken(1);"
CaptureNextTokenType(d) ::= "<d.varName> = inputSource.lookAhead(1);"

StructDecl(struct,ctorAttrs,attrs,getters,dispatchMethods,interfaces,extensionMembers, superClass={ParserRuleContext}) ::= <<
class <struct.name> extends <superClass><if(interfaces)> implements <interfaces; separator=", "><endif> {
  <if(attrs)><\n><attrs:{a | <a>;}; separator="\n"><endif>

  <struct.name>(ParserRuleContext parent, int invokingState) : super(parent, invokingState);

  <if(ctorAttrs)><struct.name>.args(ParserRuleContext parent, int invokingState<struct.ctorAttrs:{a | , this.<a.name>}>) : super(parent, invokingState);<\n><endif>
  int get ruleIndex => <parser.name>.RULE_<struct.derivedFromName; format="upper">;
  <if(getters)><\n><getters:{g | <g>}; separator="\n\n"><endif>
<if(struct.provideCopyFrom)> <! don't need copy unless we have subclasses !>
  <struct.name>.from(<struct.name> context) : super.from(context) {
    <ctorAttrs:{a | <a> = context.<a>;}; separator="\n">
  }
<endif>
  <if(dispatchMethods)><\n><dispatchMethods; separator="\n\n"><endif>
  <if(extensionMembers)><\n><extensionMembers; separator="\n\n"><endif>
}
>>

AltLabelStructDecl(struct,attrs,getters,dispatchMethods,currentRule) ::= <<
class <struct.name> extends <currentRule.name; format="cap">Context {
  <attrs:{a | <a>;}; separator="\n">
  <getters:{g | <g>}; separator="\n">
  <struct.name>(<currentRule.name; format="cap">Context context) : super.from(context);
  <dispatchMethods; separator="\n">
}
>>

ListenerDispatchMethod(method) ::= <<
void <if(method.isEnter)>enter<else>exit<endif>Rule(ParseTreeListener listener) {
  if (listener is <parser.grammarName>Listener)
    listener.<if(method.isEnter)>enter<else>exit<endif><struct.derivedFromName; format="cap">(this);
}
>>

VisitorDispatchMethod(method) ::= <<
T accept<T>(ParseTreeVisitor<T> visitor) {
  if (visitor is <parser.grammarName>Visitor<T>) return visitor.visit<struct.derivedFromName; format="cap">(this);
  else return visitor.visitChildren(this);
}
>>

AttributeDecl(d) ::= "<if(!d.type)>dynamic <endif><d.decl>"

// If we don't know location of label def x, use this template
labelref(x) ::= "<if(!x.isLocal)>localContext.<endif><x.name>"

// For any action chunk, what is correctly-typed context struct ptr?
ctx(actionChunk) ::= "localContext"
// used for left-recursive rules
recRuleAltPredicate(ruleName,opPrec)  ::= "precedencePredicate(context, <opPrec>)"
recRuleSetReturnAction(src,name)	  ::= "$<name> = $<src>.<name>;"
recRuleSetStopToken()                 ::= "context.stop = inputSource.lookToken(-1);"

recRuleAltStartAction(ruleName, ctxName, label) ::= <<
localContext = new <ctxName>Context(_parentctx, _parentState);
<if(label)>localContext.<label> = _prevctx;<endif>
pushNewRecursionContext(localContext, _startState, RULE_<ruleName; format="upper">);
>>

recRuleLabeledAltStartAction(ruleName, currentAltLabel, label) ::= <<
localContext = new <currentAltLabel; format="cap">Context(new <ruleName; format="cap">Context(_parentctx, _parentState));
<if(label)>localContext.<label> = _prevctx;<endif>
pushNewRecursionContext(localContext, _startState, RULE_<ruleName; format="upper">);
>>

recRuleReplaceContext(ctxName) ::= <<
localContext = new <ctxName>Context(localContext);
context = localContext;
_prevctx = localContext;
>>

recRuleSetPrevCtx() ::= <<
if (parseListeners != null) triggerExitRuleEvent();
_prevctx = localContext;
>>


LexerFile(lexerFile, lexer, namedActions) ::= <<
<fileHeader(lexerFile.grammarFileName, lexerFile.ANTLRVersion)>
<if(lexerFile.genPackage)>
part of <lexerFile.genPackage>;
<endif>
<namedActions.header>

<lexer>
>>

Lexer(lexer, atn, actionFuncs, sempredFuncs, superClass) ::= <<
class <lexer.name> extends <superClass; null="Lexer"> {

  static const int <lexer.tokens:{k | <k> = <lexer.tokens.(k)>}; separator=", ", wrap, anchor>;
  <rest(lexer.modes):{m|<\n>static const int <m> = <i>;}; separator="\n">
  <atn>
  final sharedContextCache = new PredictionContextCache();

  final List\<String> modeNames = [
    <lexer.modes:{m| "<m>"}; separator=", ", wrap, anchor>
  ];

  final List\<String> tokenNames = [
    <lexer.tokenNames:{t | <t>}; null="\"\<INVALID>\"", separator=", ", wrap, anchor>
  ];

  final List\<String> ruleNames = [
    <lexer.ruleNames:{r | "<r>"}; separator=", ", wrap, anchor>
  ];
  <if(namedActions.members)><namedActions.members><else><\t><endif>
  <lexer.name>(ANTLRInputStream input) : super(input) {
    var _decisionToDfa = new List\<Dfa>(atn.numberOfDecisions);
    for (int i = 0; i \< atn.numberOfDecisions; i++) {
      _decisionToDfa[i] = new Dfa(atn.getDecisionState(i), i);
    }
    interpreter = new LexerAtnSimulator(atn, _decisionToDfa, sharedContextCache, this);
  }

  String get serializedAtn => utf.decodeUtf16(_serializedAtnBytes);

  String get grammarFileName => "<lexer.grammarFileName>";
  <dumpActions(lexer, "", actionFuncs, sempredFuncs)>
}
>>

SerializedATN(model) ::= <<
static final Uint16List _serializedAtnBytes = new Uint16List.fromList(const \<int>[
	<if(model.serialized)>
		<model.serialized; wrap={<\n>   }>
	<endif>
]);

final Atn atn = AtnSimulator.deserializeBytes(_serializedAtnBytes);
>>

SerializedATNOld(model) ::= <<
<if(rest(model.segments))>
<\n>static const String _serializedAtn =  <model.segments:{segment| "<segment; wrap={"<\n><\t>"}>"}; separator="\n">;

final Atn atn = AtnSimulator.deserialize(_serializedAtn);
<else>
<! only one segment, can be inlined !>
<\n>static const String _serializedAtn =  "<model.serialized; wrap={"<\n><\t>"}>";

final Atn atn = AtnSimulator.deserialize(_serializedAtn);
<endif>
>>

/// Using a type to init value map, try to init a type; if not in table
/// must be an object, default value is "null".
initValue(typeName) ::= <<
<dartTypeInitMap.(typeName)>
>>

codeFileExtension() ::= ".dart"
